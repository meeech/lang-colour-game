{"version":3,"sources":["index.js"],"names":["blankGuess","name","colour","actions","languages","gameStateReducer","state","action","console","log","type","colours","payload","nextRound","shuffle","slice","toGuess","random","picks","isWinner","scorecard","previousScorecard","correct","round","streak","scorecardUpdate","Error","ColourList","setPlayerGuess","items","map","Swatch","key","onClick","logColour","Header","className","style","backgroundColor","Game","props","useReducer","playerGuess","gameState","gameStateDispatch","useEffect","a","fetch","response","ok","error","yaml","text","parsed","safeLoad","_colours","reduce","acc","value","color","push","length","fetchData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47bb3aef.chunk.js","sourcesContent":["import React, { useEffect, useReducer } from 'react';\nimport ReactDOM from 'react-dom';\nimport { random, reduce, shuffle } from 'lodash';\nimport './index.css';\nimport yaml from 'js-yaml';\n\n// How many colour swatches to choose from\nconst picks = 3;\nconst blankGuess = { name: null, colour: null };\n\n// reducer actions\nconst actions = {\n  INIT: 'INIT',\n  GUESS: 'GUESS',\n};\n\n// TODO copy this to the project directly?\nconst languages =\n  'https://raw.githubusercontent.com/github/linguist/master/lib/linguist/languages.yml';\n\nconst logColour = (colour) => {\n  console.log(\n    `%c ${colour.name} ${colour.colour}                            `,\n    `color: #000;font-weight:bold; background-color:${colour.colour}`\n  );\n};\n\nconst scorecardUpdate = (previousScorecard, isWinner) => {\n  const correct = isWinner ? previousScorecard.correct + 1 : 0;\n  const round = previousScorecard.round + 1;\n  const streak = previousScorecard.streak > correct ? previousScorecard.streak : correct;\n  return { correct, round, streak };\n};\n\nconst gameStateReducer = (state, action) => {\n  console.log('gameStateReducer', state, action);\n\n  if (actions.INIT === action.type) {\n    const colours = action.payload;\n    const nextRound = shuffle(colours).slice(0, picks);\n    const toGuess = nextRound[random(picks - 1)];\n    return { ...state, colours, nextRound, toGuess };\n  }\n\n  if (actions.GUESS === action.type) {\n    const colours = state.colours;\n    const playerGuess = action.payload;\n    const isWinner = playerGuess.name === state.toGuess.name;\n    const nextRound = shuffle(colours).slice(0, picks);\n    const toGuess = nextRound[random(picks - 1)];\n    const scorecard = scorecardUpdate(state.scorecard, isWinner);\n    return { ...state, nextRound, toGuess, scorecard };\n  }\n\n  throw new Error(`Did not handle action ${action.type}`);\n};\n\nconst ColourList = ({ colours, setPlayerGuess }) => {\n  console.log('ColourList...');\n  const items = colours.map((colour) => (\n    <Swatch\n      key={colour.name}\n      onClick={() => {\n        logColour(colour);\n        setPlayerGuess(colour);\n      }}\n      name={colour.name}\n      colour={colour.colour}\n    />\n  ));\n  return <>{items}</>;\n};\n\nconst Header = ({ toGuess, scorecard }) => {\n  return (\n    <div className=\"header\">\n      <div className=\"to-guess\">{toGuess.name}</div>\n      <div className=\"scorecard\">\n        <div>round: {scorecard.round}</div>\n        <div>correct: {scorecard.correct}</div>\n        <div>streak: {scorecard.streak}</div>\n      </div>\n    </div>\n  );\n};\n\nconst Swatch = ({ colour, onClick }) => {\n  return <div className=\"swatch\" style={{ backgroundColor: colour }} onClick={onClick}></div>;\n};\n\nconst Game = (props) => {\n  const [gameState, gameStateDispatch] = useReducer(gameStateReducer, {\n    colours: [],\n    nextRound: [],\n    playerGuess: blankGuess,\n    toGuess: blankGuess,\n    scorecard: {\n      correct: 0,\n      round: 1,\n      streak: 0,\n    },\n  });\n\n  // Fetch the colour list - do I need this effect?\n  // Could this just be a regular call for fetchData which then sets the state?\n  useEffect(() => {\n    console.log('Game: colour fetch useEffect triggered');\n\n    // How can we avoid this? We know colours won't change after the first time they set. Do we use [] for the deps? that seems wrong too (based on reading)\n    if (gameState.colours.length > 0) {\n      console.log(`Effect called, but we already have our colours: ${gameState.colours.length}`);\n      return;\n    }\n\n    async function fetchData() {\n      const response = await fetch(languages);\n      if (!response.ok) {\n        console.error(response);\n      }\n\n      const parsed = yaml.safeLoad(await response.text());\n      const _colours = reduce(\n        parsed,\n        (acc, value, key) => {\n          if (value.color) {\n            acc.push({ name: key, colour: value.color });\n          }\n          return acc;\n        },\n        []\n      );\n      gameStateDispatch({ type: actions.INIT, payload: _colours });\n    }\n    fetchData();\n  }, [gameState.colours]);\n\n  const setPlayerGuess = (colour) => {\n    gameStateDispatch({ type: actions.GUESS, payload: colour });\n  };\n\n  console.log('Game:return/render', gameState);\n  return (\n    <>\n      <div>\n        <Header toGuess={gameState.toGuess} scorecard={gameState.scorecard} />\n      </div>\n      <div className=\"container\">\n        {/* this still feels like prop drilling */}\n        <ColourList colours={gameState.nextRound} setPlayerGuess={setPlayerGuess} />\n      </div>\n    </>\n  );\n};\n\nReactDOM.render(<Game />, document.getElementById('root'));\n"],"sourceRoot":""}